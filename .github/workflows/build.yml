name: Build React Native CI App

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Choose platform to build'
        required: true
        default: 'ANDROID'
        type: choice
        options:
          - ANDROID
          - IOS
          - WEB
      buildType:
        description: 'Choose Android build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - release
          - debug
      buildAPKorAAB:
        description: 'Choose Android or AAB build type'
        required: true
        default: 'apk'
        type: choice
        options:
          - apk
          - aab
      AndroidVersionName:
        description: 'Android App version name is the actual user facing version of the Android app (e.g 1.2.3)'
        required: true
        default: '1.0.0'
        type: string
      IOSAppVersion:
        description: 'iOS app version is the actual user facing version of the iOS app (e.g 1.2.3)'
        required: true
        default: '1.0.0'
        type: string
      BuildVersion:
        description: 'For iOS/Android Build version is internal number that developers use to track individual builds of the app (e.g., 100)'
        required: true
        default: '1'
        type: string
      WebAppVersion:
        description: 'Web app version'
        required: true
        default: '1.0.0'
        type: string
      SetEnvironment:
        description: 'Set Environment for the app'
        required: true
        default: 'DEV'
        type: choice
        options:
          - DEV
          - UAT
          - PROD
      FirebaseTesterGroup:
        description: 'Tester group for Firebase App Distribution'
        required: true
        default: 'UAT'
        type: choice
        options:
          - UAT
          - DEV

jobs:
  setupEnv:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      repository_name: ${{ steps.get_repo_name.outputs.REPO_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: Print Versions
        run: |
          echo "Node.js: $(node -v)"
          echo "NPM: $(npm -v)"
          echo "Java: $(java -version)"
          echo "Gradle: $(gradle -v)"
          echo "Android SDK: $(sdkmanager --version)"

      - name: Get Repository Name
        id: get_repo_name
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Archive Workspace
        uses: actions/upload-artifact@v4
        with:
          name: reactnative-workspace
          path: .
          retention-days: 1

  android-build:
    needs: setupEnv
    if: ${{ github.event.inputs.platform == 'ANDROID' }}
    name: Build Android APK & AAB
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ needs.setupEnv.outputs.repository_name }}

    steps:
      - name: Download Workspace from SetupEnv
        uses: actions/download-artifact@v4
        with:
          name: reactnative-workspace
          path: .

      - name: Install Java & Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
            gradle-

      - name: Set Android Version
        run: |
          sed -i "s/versionCode=[0-9]\+/versionCode=${{ github.event.inputs.BuildVersion }}/" android/gradle.properties
          sed -i "s/versionName=.*/versionName=${{ github.event.inputs.AndroidVersionName }}/" android/gradle.properties

      - name: Grant Execute Permission to Gradle Wrapper
        run: chmod +x android/gradlew

      - name: Install Dependencies
        run: npm install

      - name: Build Android APK or AAB
        run: |
          cd android
          ./gradlew clean
          if [ "${{ github.event.inputs.buildAPKorAAB }}" == "apk" ]; then
            ./gradlew assembleRelease --stacktrace --info --parallel
          elif [ "${{ github.event.inputs.buildAPKorAAB }}" == "aab" ]; then
            ./gradlew bundleRelease --stacktrace --info --parallel
          fi

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Google Cloud SDK
        run: |
          curl https://sdk.cloud.google.com | bash
          exec -l $SHELL
          gcloud components install firebase
          gcloud components install app-distribution
          gcloud components update

      - name: Authenticate with Google Cloud
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > $HOME/firebase-key.json
          gcloud auth activate-service-account --key-file=$HOME/firebase-key.json
          gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}

          # Set the Google credentials environment variable for Firebase CLI
          export GOOGLE_APPLICATION_CREDENTIALS="$HOME/firebase-key.json"

          # Verify authentication
          gcloud auth list
          firebase projects:list

      - name: Upload APK to Firebase App Distribution
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS="$HOME/firebase-key.json"

          npx firebase appdistribution:distribute android/app/build/outputs/apk/release/app-release.apk \
              --app "${{ secrets.FIREBASE_APP_ID }}" \
              --release-notes "New update available" \
              --groups ${{ github.event.inputs.FirebaseTesterGroup }}

      - name: Upload APK & AAB Artifacts 
        uses: actions/upload-artifact@v4
        with:
          name: ReactNative-Android-Build-${{ github.event.inputs.buildType }}
          path: |
            if [ "${{ github.event.inputs.buildAPKorAAB }}" == "apk" ]; then
            android/app/build/outputs/apk/${{ github.event.inputs.buildType }}/app-${{ github.event.inputs.buildType }}.apk
            elif [ "${{ github.event.inputs.buildAPKorAAB }}" == "aab" ]; then 
            android/app/build/outputs/bundle/${{ github.event.inputs.buildType }}/app-${{ github.event.inputs.buildType }}.aab
            fi
          retention-days: 10

  build-ios:
    needs: setupEnv
    if: ${{ github.event.inputs.platform == 'IOS' }}
    name: Build & Distribute iOS App
    runs-on: macos-latest
    env:
      REPO_NAME: ${{ needs.setupEnv.outputs.repository_name }}

    steps:
    - name: Download Workspace
      uses: actions/download-artifact@v4
      with:
        name: reactnative-workspace
        path: .

    - name: Update Info.plist with App Version
      run: |
          plutil -replace CFBundleShortVersionString -string ${{ github.event.inputs.IOSAppVersion }} ios/adbReactMIB/Info.plist
          plutil -replace CFBundleVersion -string ${{ github.event.inputs.BuildVersion }} ios/adbReactMIBApp/Info.plist

    - name: Install Dependencies
      run: |
        npm install
        chmod +x node_modules/react-native/scripts/xcode/*.sh
        cd ios
        pod install --repo-update

    - name: Install Apple Certificates & Provisioning Profiles
      env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Archive iOS App
      run: |
        cd ios
        xcodebuild clean archive \
          -workspace adbReactMIB.xcworkspace \
          -scheme adbReactMIB \
          -sdk iphoneos \
          -archivePath ${{ github.workspace }}/build/adbReactMIB.xcarchive \
          archive -verbose

    - name: Export IPA
      run: |
        cd ios
        mkdir -p build/export
        xcodebuild -exportArchive \
          -archivePath ${{ github.workspace }}/build/adbReactMIB.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist exportOptions.plist
  
    - name: Install Google Cloud SDK
      run: |
            curl -sSL https://sdk.cloud.google.com | bash
            echo "source $HOME/google-cloud-sdk/path.bash.inc" >> $HOME/.bashrc
            echo "source $HOME/google-cloud-sdk/completion.bash.inc" >> $HOME/.bashrc
            source "$HOME/google-cloud-sdk/path.bash.inc"
            gcloud version
    
  
    - name: Authenticate with Google Cloud
      run: |
            source "$HOME/google-cloud-sdk/path.bash.inc"
            npm install -g firebase-tools

            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > $HOME/firebase-key.json
            gcloud auth activate-service-account --key-file=$HOME/firebase-key.json
            gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}
  
            # Set the Google credentials environment variable for Firebase CLI
            export GOOGLE_APPLICATION_CREDENTIALS="$HOME/firebase-key.json"
  
            # Verify authentication
            gcloud auth list
            firebase projects:list

    - name: Upload iOS IPA to Firebase App Distribution
      run: |
        export GOOGLE_APPLICATION_CREDENTIALS="$HOME/firebase-key.json"
      
        npx firebase appdistribution:distribute ios/build/export/adbReactMIB.ipa \
          --app "${{ secrets.FIREBASE_IOS_APP_ID }}" \
          --release-notes "New iOS version available!" \
          --groups ${{ github.event.inputs.FirebaseTesterGroup }}

    - name: Upload iOS Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: ios/build/export/adbReactMIB.ipa
        retention-days: 10

  build-web:
    needs: setupEnv
    if: ${{ github.event.inputs.platform == 'WEB' }}
    name: Build Web App
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ needs.setupEnv.outputs.repository_name }}

    steps:
      - name: Download Workspace from SetupEnv
        uses: actions/download-artifact@v4
        with:
          name: reactnative-workspace
          path: .

      - name: Install Dependencies
        run: |
          cd web
          npm install

      - name: Update Web App Version
        run: |
          cd web
          NEW_VERSION=${{ github.event.inputs.WebAppVersion }}
          jq --arg ver "$NEW_VERSION" '.version = $ver' package.json > temp.json && mv temp.json package.json
          echo "Updated package.json version to $NEW_VERSION"

      - name: Build Web App
        run: |
          cd web
          npm install --legacy-peer-deps
          npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/reactnative-web:${{ github.event.inputs.WebAppVersion }} .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/reactnative-web:${{ github.event.inputs.WebAppVersion }}

      - name: Upload Web Build
        uses: actions/upload-artifact@v4
        with:
          name: ReactNativeWebBuild
          path: web/dist
          retention-days: 10
