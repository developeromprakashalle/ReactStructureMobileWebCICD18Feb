
name: Build React Native CI App
#The workflow file is divided into the following sections:
#name:  The name of the workflow.
#on:  The event that triggers the workflow.
#jobs:  The list of jobs that the workflow runs. Each job contains a series of steps that execute in order.

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Choose platform to build'
        required: true
        default: 'ANDROID'
        type: choice
        options:
          - ANDROID
          - IOS
          - WEB
          

      buildType:
        description: 'Choose Android build type'
        required: true
        default: 'Debug'
        type: choice
        options:
          - Release
          - Debug

      AndroidVersionCode:
        description: 'Android App version'
        required: true
        default: '1'
        type: number

      BuildVersion:
        description: 'Build version'
        required: true
        default: '1.0.0'
        type: string

      IOSBundleVersion:
        description: 'iOS Bundle version'
        required: true
        default: '1.0.0'
        type: string
      
      WebAppVersion:
        description: 'Web app version'
        required: true
        default: '1.0.0'
        type: string

      SetEnvironment:
        description: 'Set Environment for the app'
        required: true
        default: 'DEV'
        type: choice
        options:
          - DEV
          - UAT
          - PROD

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      node_version: 22
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      - name: Print Versions
        run: |
          echo "Node.js: $(node -v)"
          echo "NPM: $(npm -v)"
          echo "Java: $(java -version)"
          echo "Gradle: $(gradle -v)"

  android-build:
    needs: setup
    if: ${{ inputs.platform == 'ANDROID' }}
    name: Build Android APK
    #virtual machine (runner) ubuntu-latest Default, recommended for most workflows where your job will execute.
    runs-on: ubuntu-latest

    steps:

      - name: Set Android Version
        run: |
          VERSION_CODE=${{inputs.AndroidVersionCode}}  # Example: 1, 2, 3...
          VERSION_NAME=${{inputs.BuildVersion}}  # Example: 1.0.1, 1.0.2...

          sed -i "s/versionCode [0-9]\+/versionCode $VERSION_CODE/" android/app/build.gradle
          sed -i 's/versionName "[0-9\.]*"/versionName "'"$VERSION_NAME"'"/' android/app/build.gradle

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          # Ensure JDK is compatible with your React Native version

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      #- name: Lint Code
      #  run: npm run lint

      #- name: Run Jest Tests with Coverage
      #  run: npx jest --coverage

      #- name: Run SonarQube Scanner
      #  run: npx sonar-scanner
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Grant Execute Permission to Gradle Wrapper
        run: chmod +x android/gradlew

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assemble${{ inputs.buildType }} bundle${{ inputs.buildType }}

      - name: Rename APK
        run: |
          mv android/app/build/outputs/apk/${{ inputs.buildType }}/app-${{ inputs.buildType }}.apk android/app/build/outputs/apk/${{ inputs.buildType }}/app.apk

      - name: Publish Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReactNativeCICD-${{ inputs.buildType }}
          path: android/app/build/outputs/apk/${{ inputs.buildType }}/app.apk


  build-ios:
    needs: setup
    if: ${{ inputs.platform == 'IOS' }}
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update
      
      - name: Install the apple certificate and proviosioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variable
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
      - name: Archive App
        run: |
          cd ios
            xcodebuild clean archive \ 
              -workspace adbReactMIB.xcworkspace \
              -scheme adbReactMIB \
              -sdk iphoneos \
              -archivePath ${{ github.workspace }}/build/adbReactMIB.xcarchive \
               archive -verbose
  
      - name: Export IPA
        run: |
         cd ios
            mkdir -p build/export
            xcodebuild -exportArchive \
              -archivePath ${{ github.workspace }}/build/adbReactMIB.xcarchive \
              -exportPath build/export \
              -exportOptionsPlist exportOptions.plist

      - name: Upload iOS Build
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: ios/build/export/adbReactMIB.ipa

  build-web:
    needs: setup
    if: ${{ inputs.platform == 'WEB' }}
    name: Build WEB APP
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          cd web
          npm install
          npm install -g typescript
          
      - run: |
          cd web 
          npm run lint
      - name: Install jq
        run: sudo apt-get install jq  

      - name: Update package.json version
        run: |
          NEW_VERSION=${{inputs.WebAppVersion}}
          jq --arg ver "$NEW_VERSION" '.version = $ver' package.json > temp.json && mv temp.json package.json
          echo "Updated package.json version to $NEW_VERSION"
        
      #- run: npx jest --coverage
      - name: Clean Web Build Directory
        run: rm -rf web/dist

      - run: |
          cd web
          npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: ReactNativeWebBuild
          path: web/dist
          retention-days: 10
